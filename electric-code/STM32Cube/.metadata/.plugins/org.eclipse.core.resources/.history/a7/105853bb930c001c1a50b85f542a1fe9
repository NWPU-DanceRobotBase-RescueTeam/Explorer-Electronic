/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * File Name          : freertos.c
 * Description        : Code for freertos applications
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under Ultimate Liberty license
 * SLA0044, the "License"; You may not use this file except in compliance with
 * the License. You may obtain a copy of the License at:
 *                             www.st.com/SLA0044
 *
 ******************************************************************************
 */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */
osThreadId defaultTaskHandle;
osThreadId Task_LED1Handle;
osThreadId Task_LED2Handle;
osThreadId Task_usartHandle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void StartDefaultTask(void const * argument);
void StartTask_LED1(void const * argument);
void StartTask_LED2(void const * argument);
void StartTask_usart(void const * argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* GetIdleTaskMemory prototype (linked to static allocation support) */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize );

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  /* place for user code */
}
/* USER CODE END GET_IDLE_TASK_MEMORY */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 128);
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* definition and creation of Task_LED1 */
  osThreadDef(Task_LED1, StartTask_LED1, osPriorityNormal, 0, 256);
  Task_LED1Handle = osThreadCreate(osThread(Task_LED1), NULL);

  /* definition and creation of Task_LED2 */
  osThreadDef(Task_LED2, StartTask_LED2, osPriorityBelowNormal, 0, 256);
  Task_LED2Handle = osThreadCreate(osThread(Task_LED2), NULL);

  /* definition and creation of Task_usart */
  osThreadDef(Task_usart, StartTask_usart, osPriorityAboveNormal, 0, 256);
  Task_usartHandle = osThreadCreate(osThread(Task_usart), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}

/* USER CODE BEGIN Header_StartDefaultTask */
/**
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
  /* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
//  for(;;)
//  {
//    osDelay(1);
//  }
  /* USER CODE END StartDefaultTask */
}

/* USER CODE BEGIN Header_StartTask_LED1 */
/**
 * @brief Function implementing the Task_LED1 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask_LED1 */
void StartTask_LED1(void const * argument)
{
  /* USER CODE BEGIN StartTask_LED1 */
	/* Infinite loop */
	for (;;)
	{
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
		osDelay(1000);
	}
  /* USER CODE END StartTask_LED1 */
}

/* USER CODE BEGIN Header_StartTask_LED2 */
/**
 * @brief Function implementing the Task_LED2 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask_LED2 */
void StartTask_LED2(void const * argument)
{
  /* USER CODE BEGIN StartTask_LED2 */
	/* Infinite loop */
	for (;;)
	{
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
		osDelay(500);
	}
  /* USER CODE END StartTask_LED2 */
}

/* USER CODE BEGIN Header_StartTask_usart */
/**
 * @brief Function implementing the Task_usart thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask_usart */
void StartTask_usart(void const * argument)
{
  /* USER CODE BEGIN StartTask_usart */
	/* Infinite loop */
	static float num = 0.0;
	for (;;)
	{
		num += 0.01f;
		printf("%.2f\r\n", num);
		osDelay(1000);
	}
  /* USER CODE END StartTask_usart */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
